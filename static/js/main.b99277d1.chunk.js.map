{"version":3,"sources":["component/info.js","component/form.js","component/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iPAWeA,EATF,kBACT,6BACI,6IACA,4LCeOC,EAlBF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCaOC,EAhBC,SAACN,GACb,OACI,yBAAKO,UAAU,aACVP,EAAMQ,MACP,6BACI,oHAAoBR,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxC,kGAAiBT,EAAMU,MACvB,gFAAcV,EAAMW,UACpB,mGAAkBX,EAAMY,SAG5B,uBAAGL,UAAU,SAASP,EAAMa,SCRlCC,EAAU,mCA6EDC,E,4MAzEbC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAAQQ,EACRN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGXC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFrB,iCAOWC,MAAM,qDAAqDjB,EAAK,UAAUM,EAAQ,iBAP7F,cAOLY,EAPK,gBAQSA,EAAQC,OARjB,OAQLC,EARK,OASXC,QAAQC,IAAIF,GAERhB,EAASgB,EAAKG,IAAInB,QAClBoB,EAAO,IAAIC,MACVC,QAAQtB,GACTuB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACV7B,KAAMkB,EAAKY,KAAK9B,KAChBF,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKG,IAAItB,QAClBE,SAAUiB,EAAKY,KAAK7B,SACpBC,OAAQuB,EACRtB,WAAOI,IAtBA,wBAyBX,EAAKsB,SAAS,CACV7B,UAAMO,EACNT,UAAMS,EACNR,aAAQQ,EACRN,cAAUM,EACVL,YAAQK,EACRJ,MAAM,+HA/BC,4C,6GAqCf,OACI,yBAAKN,UAAU,WACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAML,cAAeuC,KAAKvB,iBAC1B,kBAAC,EAAD,CACIR,KAAQ+B,KAAKzB,MAAMN,KACnBF,KAAQiC,KAAKzB,MAAMR,KACnBC,QAAWgC,KAAKzB,MAAMP,QACtBE,SAAY8B,KAAKzB,MAAML,SACvBC,OAAU6B,KAAKzB,MAAMJ,OACrBC,MAAS4B,KAAKzB,MAAMH,iB,GAhE9B6B,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgB,QAAQhB,MAAMA,EAAMgD,a","file":"static/js/main.b99277d1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погодное приложения</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить погоду</button>\r\n    </form>\r\n);\r\n\r\n// class Form extends React.Component {\r\n//     render(){\r\n//         return(\r\n//             <form onSubmit={this.props.weatherMethod}>\r\n//                 <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n//                 <button>Получить погоду</button>\r\n//             </form>\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n    return(\r\n        <div className=\"infoWeath\">\r\n            {props.city &&\r\n            <div>\r\n                <p>Местоположение: {props.city}, {props.country}</p>\r\n                <p>Температура: {props.temp}</p>\r\n                <p>Давление: {props.pressure}</p>\r\n                <p>Заход солнца: {props.sunset}</p>\r\n            </div>\r\n            }\r\n            <p className=\"error\">{props.error}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./component/info\";\r\nimport Form from \"./component/form\";\r\nimport Weather from \"./component/Weather\";\r\n\r\nconst API_KEY = \"4c3d19f283273f37bc8a70386c28bd88\";\r\n\r\nclass App extends React.Component{\r\n\r\n  state = {\r\n      temp: undefined,\r\n      city: undefined,\r\n      country:undefined,\r\n      pressure: undefined,\r\n      sunset: undefined,\r\n      error: undefined\r\n  };\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n\r\n\r\n\r\n    if(city) {\r\n        const api_url = await fetch('https://api.openweathermap.org/data/2.5/weather?q='+city+'&appid='+API_KEY+'&units=metric');\r\n        const data = await  api_url.json();\r\n        console.log(data);\r\n\r\n        var sunset = data.sys.sunset;\r\n        var date = new Date();\r\n        date.setTime(sunset);\r\n        var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n        this.setState({\r\n            temp: data.main.temp,\r\n            city: data.name,\r\n            country: data.sys.country ,\r\n            pressure: data.main.pressure,\r\n            sunset: sunset_date,\r\n            error: undefined\r\n               });\r\n          }else {\r\n        this.setState({\r\n            temp: undefined,\r\n            city: undefined,\r\n            country:undefined,\r\n            pressure: undefined,\r\n            sunset: undefined,\r\n            error:\"Ведите название города\"\r\n         })\r\n        }\r\n    };\r\n\r\n  render(){\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"main\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-5 info\">\r\n                        <Info />\r\n                    </div>\r\n                    <div className=\"col-sm-7 form\">\r\n                        <Form weatherMethod={this.gettingWeather} />\r\n                        <Weather\r\n                            temp = {this.state.temp}\r\n                            city = {this.state.city}\r\n                            country = {this.state.country}\r\n                            pressure = {this.state.pressure}\r\n                            sunset = {this.state.sunset}\r\n                            error = {this.state.error}\r\n                        />\r\n                    </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}